# configs/config.yaml

# image resize
image_size: &image_size 512 #&는 앵커로, 특정값은 별칭(*)으로 저장하여 yaml 에서 해당값을 여러번 재사용할 수 있게함.

# 최대 epochs
max_epoch: &max_epoch 40

#model_name()
model_name: &model_name Unet

# random seed값
seed: 42


# wandb
wandb:
  api_key: ##본인의 api 키 적으시면 됩니다.
  team_name: CV_SOTA
  project_name: "Segmentation_project"
  exp_name: *model_name
  use_sweep: False # True 라고 적어야 사용합니다.
  sweep_path: "configs/config_sweep.yaml" 


# 모델명 및 사전 학습 여부
model:
  name: *model_name # 모델 이름
  parameters:         # 모델 파라미터 섹션 -> 이는 segmentation_models_pytorch 공식 라이브러리의 github에서 확인.
    encoder_name: efficientnet-b0
    encoder_weights: advprop #[imagenet, advprop]2개 디폴트로 있음
    classes: 29
    in_channels: 1 # 채널 3개로 학습시 주석 처리

    # pt 파일 불러와서 이어서 학습합니다. 사용하지 않을 경우 null, 할 경우 pt 파일 경로
    check_dir: null

    lora_use: False
    lora_config:
      r: 8
      lora_alpha: 16
      lora_dropout: 0.1
      target_modules: "encoder._blocks.\\d+.(_expand_conv|_project_conv)$"
      modules_to_save: ["decoder", "encoder._conv_head"]
    
    #  torchseg에서 지원하는 인코더를 확인하려면 https://github.com/isaaccorley/torchseg/blob/main/torchseg/encoders/supported.py 에서 확인
    #  또는
    #  torchseg.list_encoders()로 확인 가능
    library_type: smp  # [smp, torchseg] 둘 중 하나 입력
    transformer_use: False  # encoder로 transformer 계열을 사용할 경우 True로 설정해야함
    img_size: *image_size  # encoder로 transformer 계열을 사용할 경우 input image size를 설정해야함, 수정할 필요X


# train 매개변수 설정
train:
  max_epoch: *max_epoch
  image_root: "data/train/DCM"
  label_root: "data/train/outputs_json"
  train_batch_size: 4
  num_workers : 16
  lr: 1e-3
  weight_decay: 1e-6
  channel_1: False
  patch_size: False #2048/256 = 8 즉,8 patch

# validation 관련 인자
validation:
  val_fold: 0
  val_interval: 5
  num_workers: 8
  threshold: 0.5
  val_batch_size: 4


# 스케줄러 관련 설정
scheduler:
  name: CosineAnnealingLR  # 스케줄러 이름
  parameters:             # 스케줄러 파라미터
    T_max: *max_epoch
    eta_min: 1e-6

fp16: True # AMP 사용시 True

# loss 관련설정
loss:
  name: FocalDiceLoss
  parameters: 
    focal_wieght: 0.7 # dict 형태로 작성해야함
    

# transform 관련_ 사용할려면 use: True로 대문제 True라고 적어야 합니다.
transform:
  Resize:
    width: *image_size #별표(*)는 이미지 별칭으로, 재사용하기 위해 사용함
    height: *image_size
  
  HorizontalFlip:
    use: False
    p: 0.5

  Rotate:
    use: False
    limit: 45 #특정 변환의 최대값 제한 설정.
    p: 0.7

  RandomBrightnessContrast:
    use: False
    brightness_limit: 0.2
    contrast_limit: 0.2
    p: 0.5


#test 관련 
test:
  image_root: "data/test/DCM"
  output_csv: "output/submission3.csv"


# checkpoint 저장 경로
save_dir: ./checkpoints/config  # 기본 저장 경로

# 학습이 끝나고 나오는 pt 저장경로를 복사붙여넣기 하면 됩니다.
pt_dir: ./checkpoints/config/best_1epoch_0.0031.pt