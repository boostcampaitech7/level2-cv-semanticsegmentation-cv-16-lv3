# configs/config.yaml

#model_name()
model_name: &model_name UnetPlusPlus

# wandb
wandb:
  api_key: ##본인의 api 키 적으시면 됩니다.
  team_name: CV_SOTA
  project_name: "segmentation_project2"
  experiment_detail: 진행하는 실험의 이름
  exp_name: *model_name

# image resize
image_size: &image_size 1024 #&는 앵커로, 특정값은 별칭(*)으로 저장하여 yaml 에서 해당값을 여러번 재사용할 수 있게함.

max_epoch: &max_epoch 10


# 모델명 및 사전 학습 여부
model:
  name: *model_name # 모델 이름
  parameters:         # 모델 파라미터 섹션 -> 이는 segmentation_models_pytorch 공식 라이브러리의 github에서 확인.
    encoder_name: efficientnet-b4
    # encoder_weights: imagenet
    classes: 29

# train 매개변수 설정
train:
  max_epoch: *max_epoch
  image_root: "data/train/DCM"
  label_root: "data/train/outputs_json"
  train_batch_size: 8
  num_workers : 16
  lr: 1e-3
  weight_decay: 1e-6


# validation 관련 인자
validation:
  val_fold: 0
  val_interval: 5
  num_workers: 8
  threshold: 0.5
  val_batch_size: 4

# 스케줄러 관련 설정
scheduler:
  name: CosineAnnealingLR  # 스케줄러 이름
  parameters:             # 스케줄러 파라미터
    T_max: *max_epoch
    eta_min: 1e-6

# loss 관련설정
loss:
  name: CombinedLoss
  parameters: {} # dict 형태로 작성해야함
    

# transform 관련
transform:
  Resize:
    width: *image_size #별표(*)는 이미지 별칭으로, 재사용하기 위해 사용함
    height: *image_size
  
  HorizontalFlip:
    use: false
    p: 0.5

  Rotate:
    use: false
    limit: 45 #특정 변환의 최대값 제한 설정.
    p: 0.7

  RandomBrightnessContrast:
    brightness_limit: 0.2
    contrast_limit: 0.2
    p: 0.5


# random seed값
seed: 42




#test 관련 
test:
  image_root: "data/test/DCM"
  model_path: "checkpoints"
  model_path2: *model_name #model_path/model_path2/model_name 으로 model 가져옴.
  model_file: "best_198epoch_0.9518.pt"
  output_csv: "output/submission3.csv"

# Output paths
output:
  checkpoint_dir: "../checkpoints"
  # name: "deeplabv3_resnet101_model.pt"




# checkpoint 저장 경로
save_dir: ./checkpoints/Unet
